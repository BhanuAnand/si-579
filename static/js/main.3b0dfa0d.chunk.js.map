{"version":3,"sources":["logo.svg","hooks/useKeyPress.js","utils/words.js","utils/time.js","App.js","reportWebVitals.js","index.js"],"names":["useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","generate","count","Array","fill","map","_","faker","random","word","join","currentTime","Date","getTime","initWords","console","log","App","leftPadding","setLeftPadding","outChars","setOutChars","charAt","currChar","setCurrChar","slice","inChars","setInChars","startTime","setStartTime","wordCount","setWordCount","wpm","setWpm","accuracy","setAccuracy","typedChars","setTypedChars","updatedOutChars","updatedInChars","substring","split","durationInMinutes","toFixed","updatedTypedChars","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b0dfa0d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from 'react';\n\n// Pass in a callback as a parameter\nconst useKeyPress = callback => {\n  \n  const [keyPressed, setKeyPressed] = useState();\n  \n  useEffect(() => {\n    // handler when a key is down\n    const downHandler = ({ key }) => {\n      if (keyPressed !== key && key.length === 1) {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n    \n    // handler when a key is up (released)\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    // Register the handlers with the browser’s window\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      // deregister the handlers with the browser’s window\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  \n  // Return the keyPressed state to the caller.\n  return keyPressed;\n};\n\nexport default useKeyPress;","import faker from 'faker';\n\n// export const generate = () => {\n//   fetch('http://quotes.rest/qod.json?category=inspire')\n//     .then(function(response){ response.json(); })\n//     .then(function(data) {\n//         const items = data.contents.quotes[0].quote;\n//         console.log(items)\n//         return items\n//     })\n// }\n\nexport const generate = (count = 10) => {\n  return new Array(count)\n    .fill()\n    .map(_ => faker.random.word()) //Call faker.random.word() to fetch one or more words\n    .join(' '); // Join all words with space\n\n};\n","export const currentTime = () => new Date().getTime();","import logo from './logo.svg';\nimport './App.css';\nimport useKeyPress from './hooks/useKeyPress';\nimport React, { useState } from 'react';\nimport { generate } from './utils/words';\nimport { currentTime } from './utils/time';\n\nconst initWords = generate();\nconsole.log(initWords);\n\nfunction App() {\n  \n  const [leftPadding, setLeftPadding] = useState(\n    new Array(10).fill(' ').join(''),\n  );\n  const [outChars, setOutChars] = useState('');\n  const [currChar, setCurrChar] = useState(initWords.charAt(0));\n  const [inChars, setInChars] = useState(initWords.slice(1));\n\n  const [startTime, setStartTime] = useState();\n  const [wordCount, setWordCount] = useState(0);\n  const [wpm, setWpm] = useState(0);\n\n  const [accuracy, setAccuracy] = useState(0);\n  const [typedChars, setTypedChars] = useState('');\n\n  useKeyPress(key => {\n    if (!startTime) {\n      setStartTime(currentTime());\n    }\n\n    let updatedOutChars = outChars;\n    let updatedInChars = inChars;\n\n    // Verify that the user has entered the right keystroke. \n    // Otherwise, the condition of the typing lines remains unchanged.\n    if (key === currChar) {\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1));\n      }\n      updatedOutChars += currChar;\n      setOutChars(updatedOutChars);\n\n      setCurrChar(inChars.charAt(0));\n\n      // From incomingChars, remove the first character. \n      // Check to see if there are still enough words in the incomingChars. \n      // If not, use the generate method to add 10 or more new words.\n      updatedInChars = inChars.substring(1);\n      if (updatedInChars.split(' ').length < 10) {\n        updatedInChars += ' ' + generate();\n      }\n      setInChars(updatedInChars);\n\n      if (inChars.charAt(0) === ' ') {\n        setWordCount(wordCount + 1);\n        const durationInMinutes = (currentTime() - startTime) / 60000.0;\n        setWpm(((wordCount + 1) / durationInMinutes).toFixed(2));\n      }\n    }\n\n    const updatedTypedChars = typedChars + key;\n    setTypedChars(updatedTypedChars);\n    setAccuracy(\n      ((updatedOutChars.length * 100) / updatedTypedChars.length).toFixed(\n        2,\n      ),\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"Character\">\n          <span className=\"Character-out\">\n            {(leftPadding + outChars).slice(-10)}\n          </span>\n          <span className=\"Character-current\">{currChar}</span>\n          <span>{inChars.slice(0, 20)}</span>\n        </p>\n        <h3>\n          WPM: {wpm} | ACC: {accuracy}%\n        </h3>\n        <span>\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/BhanuAnand/si-579\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Source Code\n          </a>\n        </span>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}